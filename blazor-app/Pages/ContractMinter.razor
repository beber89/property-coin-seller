@page "/minter"
@using Nethereum.Web3;
@using Newtonsoft.Json.Linq;

@inject HttpClient Http;
@inject Web3Service Web3s;

<h1>Minter</h1>

<input @bind="proofFile" type="file" placeholder="Add Solution"/>
<button class="btn btn-primary" @onclick="SubmitProof">Submit Proof</button>

@code {
  protected override async Task OnInitializedAsync()  {
    GetAccountBalance().Wait();
  }
  private string proofFile;
    private async void SubmitProof()
    {
      string[] path = proofFile.Split("\\", 10);
      ProofModel soln = await Http.GetFromJsonAsync<ProofModel>($"proofs/{path[2]}");
        //TODO: load contract , add solution into contract
      string rawArtifact = await Http.GetStringAsync("artifacts/SolnSquareVerifier.json");
      dynamic abi = JObject.Parse(rawArtifact);
      Console.WriteLine(abi.networks);

    }
    // ---- Ethereum code ---------------------------------------------
        private async Task GetAccountBalance()
        {

            var balance = await Web3s.getWeb3().Eth.GetBalance.SendRequestAsync("0xD04FB1a81c9252b02e137AE3A75610172B7355Dd");
            Console.WriteLine($"Balance in Wei: {balance.Value}");

            var etherAmount = Web3.Convert.FromWei(balance.Value);
            Console.WriteLine($"Balance in Ether: {etherAmount}");
        }
    // ----------------------------------------------------------------
    public class ProofModel
    {
        public Proof proof { get; set; }

        public List<string> inputs  { get; set; }
    }
    public class Proof {
      public List<string> a { get; set; }
      public List<List<string>> b { get; set; }
      public List<string> c { get; set; }
    }
}
